#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
void frqtest(int *x);
void getData(int a[], int n) ;
void copyArray(int a[], int b[], int size);
void selectionSort(int a[], int size);
void bubbleSort(int a[], int n);
void printResult(int a[], int b[], int c[], int n) ;
void count(int [], int []);
void mode(int [], int []);
void printArray(int []);
void push(int item);
int pop();
void del();
int peek();
void printStack();

//1. 다섯 개의 정수를 사용자로부터 입력 받아 일차원 정수 배열 저장한 후 선택 정렬과 버블 정렬을 사용하여 순서대로 나열
#define MAX 5

void getData(int a[], int n) 
{
 int i;
 for(i=0; i<MAX; i++){
  printf("정수 입력 : ");
   scanf("%d", &a[i]);
 }
}

void copyArray(int a[], int b[], int size)
{
 int i;

 int *p, *q;
 p = a;
 q = b;
 for(i=0; i<size; i++){
  *(q+i) = *(p+i);
 }
}

void selectionSort(int a[], int size)   //선택 정렬 연산
{
 int i, j, t, min, temp=0;
 for(i=0; i<MAX-1; i++){
  for(j=i+1; j<MAX; j++){
   if(a[j] < a[i]){
  temp = a[i];
  a[i] = a[j];
  a[i] = temp;
   }
  }
}
}
void bubbleSort(int a[], int n)
{
 int i, j, t, temp=0;
 
 for(i=0; i<MAX; i++){
  for(j=0; j<MAX-1-i; j++){
   if(a[j-1] > a[j]){
    temp = a[j-1];
    a[j-1] = a[j];
    a[j] = temp;
   }
  }
 }
}

void printResult(int a[], int b[], int c[], int n) 
{
  int i;
  printf("\n입력데이터\t선택정렬\t버블정렬");
  for(i=0; i<n; i++) 
    printf("\n list: %d, \t sslist: %d, \t bslist: %d", a[i], b[i], c[i]);
}
 
void ex01(void){
 int list[5], sslist[5], bslist[5]; 
 getData(list, MAX); //정렬할 초기 원소 배열
 copyArray(list, sslist, MAX);
 selectionSort(sslist, MAX); //선택 정렬 연산 호출
 copyArray(list, bslist, MAX);
 bubbleSort(bslist, MAX); //버블 정렬 연산 호출
 printResult(list, sslist, bslist, MAX);
 getchar(); getchar();
}

//2. 스택

#define STACK_SIZE 100
int stack[STACK_SIZE];
int top = -1;
void push(int item){
 if(top>=STACK_SIZE-1){
  printf("\n Stack is full \n");
  return
 }
 else stack[++top] = item;
}
int pop(){
 if(top == -1){
  printf("\n Stack is empty \n");
  return 0;
 }
 else return stack[top--];
}
void del(){
 if(top ==-1){
  printf("\n Stack is empty \n");
  exit(1);
 }
 else top--;
}

int peek(){
 if(top ==-1){
  printf("\n Stack is empty \n");
  exit(1);
 }
 else
  return stack[top];
}
void printStack(){
 int i;
 printf("\n Stack [ ");
 for(i=0; i<=top; i++)
  printf("%d", stack[i]);
 printf("]");
}

void ex02(void){
 int item;
  printStack();
  push(1); printStack();
  push(2); printStack();
  push(3); printStack();
  item = peek(); printStack();
  printf("peek top => %d", item);
  del(); printStack();
  item = pop(); printStack();
  printf("\t pop top => %d", item);
   item = pop(); printStack();
  printf("\t pop top => %d", item);
  pop();
  getchar();
}
//3번

#include<stdio.h>


void ex01(void){
int j,n,num[10],freq[5]={0},max=0,index;
printf("0에서4까지의 정수를 열개 입력하시오.\n");
frqtest(num);

for(j=0;j<10;j++){
freq[num[j]]++;
}
for(n=0;n<5;n++){
if(max<freq[n]){
max=freq[n];
index = n;
}
}
printf("0 ~ 4중 가장많이나온수는 %d 이고, %d 번 나왔습니다.",index,max);
}
void frqtest(int *x){
int i;
for(i=0;i<10;i++){
scanf("%d",(x+i));
if(*(x+i)<0 || *(x+i)>4){
i--;
printf("다시입력<0 ~ 4>:");
continue
}
}

}


/*
4. 0에서 9까지 난수 80개 생성시켜 그 빈도수를 저장하고 다음을 만족하도록 프로그램을 작성하시오.
 - 출현 빈도수를 출력하고 *로 막대그래프를 출력
 - 빈도수 가장 많은 수와 가장 적은 수를 출력
 - 가능한 한 많은 함수를 사용
*/
 
#define SIZE 80
#define MAX 10


void ex04(void){ 
  int frequency[10] = { 0 };
  int response[SIZE] = { 0 };
  int i;
  long seed;
 
  srand((long) time(NULL));
  for(i=0; i<SIZE; i++)
   response[i] = rand()%MAX;
  printArray(response);
  mode(frequency, response);
  getchar();
}
void printArray(int a[]){
 int j;
 printf("다음과 같은 0에서 9까지의 정수에서 \n");
 for(j=0; j<SIZE; j++){
  printf("%2d %c", a[j], ((j%20)? ' ' : '\n'));
 }
 printf("\n\n");
}
void mode(int freq[], int answer[]){
 int rating, j, h, largest =0, modeValue = 0;
 printf("\n%s\n%s\n%s\n", "*****", "분포", "*****");
 for(j=0; j<=SIZE-1; j++)
  ++freq[answer[j]];
 printf("--------------------------------------\n");
 printf("%10s%10s%8s%-20s\n\n", "수", "횟수", " ", "히스토그램");
 printf("%28s%-40s\n%28s%- 40s\n", " ", "      1   1   2   2", " ", "1  5  0  5   0   5");
 printf("--------------------------------------\n");
 for(rating=0; rating<=9; rating++)
 {
  printf("%10d%10d%8s", rating, freq[rating], "");
  if(freq[rating] > largest){
   largest = freq[rating];
   modeValue = rating;
  }
  for(h =1; h<freq[rating]; h++)
   printf("*");
   printf("\n");
 }
 printf("--------------------------------------\n");
 
 printf("분포에서는 수의 빈도 횟수를 나타낸다. \n분석결과, 가장 많은 빈도수는 %d이(가) %d번 나타났다.", modeValue, largest);

}

void main(void){
 ex01();
 ex02();
 ex03();
 ex04();
 getchar();
}
