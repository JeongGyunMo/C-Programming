3. 명령어 라인(메인함수의 매개변수)으로부터 받은 정수를 그 값을 표현하는 문자열로 출력하는 프로그램을 적성하시오. 
#include <stdio.h>
#include <stdlib.h>
#define CNTARGC 2

char *strnum[] = {"일", "이", "삼", "사", "오", "육", "칠", "팔", "구"};
char *strdigit[] = {"", "십", "백", "천"};

int main(int argc, char *argv[])
{
int input, output;
int num = 1000;
int digit = 3;
int n = atoi(argv[1]);

if(argc != CNTARGC )
{
  printf("올바른 입력이 아닙니다. 다시 입력하세요");
  printf("프로그램 수행방법 : 실행파일이름 10000보다작은정수"); 
  exit(-1);
}

printf("입력한 정수는 [");
for(;digit>=0;digit--)
{
printf("%s%s ",strnum[(n/num)-1],strdigit[digit]);
n= n%num;
num/=10;
}
printf("]입니다.\n");
}


1. 다음 일차원 배열과 포인터 선언 문장에 대하여 다음 각각의 연산식 결과를 기술하시오.

	int score[][3] = {3, 5, 6, 9, 2, 5, 7, 8, 9, 1};
	int (*ps)[3] = score; 
	int *p = score[0]; 
	int *q = score[1];

① 	*ps = 3

② 	ps[2][2]  = 9

③ 	**score  = 3

④ 	*p  = 3

⑤ 	*q  = 9

⑥ 	*score[2]   = 7

⑦ 	*(score[2]+1)  = 8

⑧ 	*(*(score+1)+1)  = 2

⑨ 	*(*score+5)  = 5

⑩ 	(*(score+3))[2]   = 0







2. 자료유형 double형 1차원 배열에서 가장 큰 값과 가장 작은 값을 찾아 그 값의 차이를 반환하는 함수를 만들어 결과를 알아보는 프로그램을 작성하시오.

#include <stdio.h>
#define SIZE 5

void print(double *x, int size);
double diffminmax(double *a, int size);

int main(void)
{
  double source[5] = {3.12, 5.14, 7.25, 7.48, 5.91};

  printf("***source 원배열값***\n");
  print(source, SIZE);
  printf("\n최대값과 최소값의 차이는 %.2lf 이다. \n", diffminmax(source, SIZE));
}
double diffminmax(double *a, int size){
	double max=*a,min=*a;
	int i;

	for(i = 0; i<size; i++){
			if(max<*(a+i)){
				max=*(a+i);
			}
			if(min>*(a+i)){
				min=*(a+i);
			}
	}
	return max-min;
}
void print(double *x, int size){
	int n;

	for(n=0;n<size;n++){
		printf("%.2lf\n",*(x+n));
	}
	printf("*********************");
}



3. 다음을 참고로 [파스칼의 삼각형]을 생성하고 출력하는 프로그램을 작성하시오.

  - 정수형 배열 pascal[10][10]을 선언하여 10행까지 [파스칼의 삼각형]을 저장 후 출력

  - size 크기의 파스칼 삼각형을 이차원 배열 p에 생성하는 함수
    void pascaltriangle(int (*p)[10], int size);

  - 하나의 행에서 처음과 끝이 아니면 p[i][j] = p[i-1][j] + p[i-1][j-1];
  - 하나의 행에서 처음 또는 끝이면 p[i][j] = 1;

  - size 크기 배열 p를 그림과 같이 삼각형만 출력하는 함수
    void triangleprint(int (*p)[10], int size)
? 
#include <stdio.h>
#define ROW 10

void pascaltriangle(int (*p)[ROW], int size);//파스칼 입력
void triangleprint(int (*p)[ROW], int size);//출력

void main(void) 
{
	int pascal[10][10] = {0};
	pascaltriangle(pascal, ROW);
	triangleprint(pascal, ROW);
}
void pascaltriangle(int (*p)[ROW], int size){
	int i,j=0;

	for(i=0;i<size;i++){
		p[i][j] = 1;
		for(j=1;j<=i;j++){
			p[i][j] = p[i-1][j] + p[i-1][j-1];
		}
		j=0;
	}
}
void triangleprint(int (*p)[ROW], int size){
	int m,v;

		for(m=0;m<size;m++){
			for(v=0;v<=m;v++){
			printf("%d",p[m][v]);
		}
			printf("\n");
	}
}


4. 다음을 참고로 두 일차원 배열의 병합을 구하여 출력하는 프로그램을 작성하시오.

  - 이미 오름차순으로 정렬되어 있는 두 배열 a, b의 병합 결과 c는 다음과 같음 
    int a[] = {1, 2, 5, 7, 9, 14}; 
    int b[] = {2, 3, 6, 8, 13};
    int c[] = {1, 2, 2, 3, 5, 6, 7, 8, 9, 13, 14};

  - 배열 a, b의 병합 결과를 배열c에 저장하는 함수 
    (an=a배열크기, bn= b배열크기) 
    void arraymerge(int *a, int an, int *b, int bn, int *c)

#include <stdio.h>

void arraymerge(int *a, int an, int *b, int bn, int *c);
void print(int *p, int size);
//an=a배열크기, bn= b배열크기
void main(void) 
{
int a[] = {1, 2, 5, 7, 9, 14}; 
int an = sizeof(a)/sizeof(a[0]);

int b[] = {2, 3, 6, 8, 13};
int bn = sizeof(b)/sizeof(b[0]);

int c[20] = {0};

arraymerge(a, an, b, bn, c);
print(c, an+bn);
}
void arraymerge(int *a, int an, int *b, int bn, int *c)
{
int i,j;
if(an>bn)
{
while(bn)
{
if(*a<=*b){
*c++=*a++;
an--;
}
else
{
*c++=*b++;
bn--;
}

}
while(an)
{
*c++=*a++;
an--;
}
}else
{
while(an)
{
if(*a<=*b){
*c++=*a++;
an--;
}
else
{
*c++=*b++;
bn--;
}

}
while(bn)
{
*c++=*b++;
bn--;
}
}
}
void print(int *p, int size){
int i;

for(i=0;i<size;i++){
printf("%d ",*(p+i));
}
}

5. 다음을 참고로 표준입력으로 받은 두 실수의 사칙연산을 수행하는 프로그램을 작성하시오. 

  - 사칙연산을 수행하는 함수를 모두 4개 정의하여 이를 함수 포인터 배열에 저장하여 수행
  - 사칙연산 중에서 하나의 연산을 다음과 같이 표준입력으로 받음


사칙연산을 위하여 각 연산에 대한 번호를 입력하세요.
  [더하기]: 0, [빼기]: 1, [곱하기]: 2, [나누기]: 3 >> 0

사칙연산을 수행할 실수 2개를 입력하세요. >> 22.3 33.4

더하기 수행 : 22.300000 + 33.400000 = 55.700000

#include <stdio.h>

void add(double *z, double x, double y) { *z = x + y; }
void subtract(double *z, double x, double y) { *z = x - y; }
void multiply(double *z, double x, double y) { *z = x * y; }
void devide(double *z, double x, double y) { *z = x / y; }

int main(void){
	double m,v,result;
	int op;
	char opch[4] = {'+','-','*','/'};
	char *opstr[4] = {"더하기","빼기","곱하기","나누기"};
	void (*pfary[4])(double*, double, double) = {add,subtract, multiply,devide};

	printf("사칙연산을 위하여 각 연산에 대한 번호를 입력하세요.\n [더하기]: 0, [빼기]: 1, [곱하기]: 2, [나누기]: 3 >>");
	scanf("%d", &op);

	if(!(0<=op && op<=3)){
		printf("메뉴입력이 잘못되었습니다.");
		return 0;
	}

	printf("\n사직연산을 수행할 실수 2개를 입력하세요. >>");
	scanf("%lf%lf",&m,&v);

	pfary[op](&result,m,v);
	printf("%s  수행: %lf %c %lf  =  %lf\n",opstr[op],m,opch[op],v,result);
}
